-- Процедура для удаления таблицы (если существует)
CREATE OR REPLACE PROCEDURE
drop_table_if_exists(table_name IN VARCHAR2)
IS BEGIN
EXECUTE IMMEDIATE 'DROP TABLE ' || table_name;
EXCEPTION
WHEN OTHERS THEN
IF SQLCODE != -942 THEN RAISE;
END IF;
END drop_table_if_exists;


-- Удаление таблиц
CALL drop_table_if_exists('transactions');
CALL drop_table_if_exists('card_dpan');
CALL drop_table_if_exists('cards');
CALL drop_table_if_exists('users');


-- Пользователи
CREATE TABLE users ( 
  person_id                 INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 0 MINVALUE 0 NOT NULL PRIMARY KEY, 
  person                    VARCHAR2(100) NOT NULL,
  current_age               INTEGER CHECK (current_age BETWEEN 14 AND 110),
  retirement_age            INTEGER CHECK (retirement_age BETWEEN 50 AND 100),
  birth_year                INTEGER CHECK (birth_year > 1900),
  birth_month               INTEGER CHECK (birth_month BETWEEN 1 AND 12),
  gender                    VARCHAR2(10) CHECK (gender IN ('Female', 'Male')),
  address                   VARCHAR2(100),
  apartment                 VARCHAR2(100),
  city                      VARCHAR2(100),
  state                     VARCHAR2(100),
  zipcode                   INTEGER,
  latitude                  NUMBER,
  longitude                 NUMBER,
  per_capita_income_zipcode INTEGER CHECK (per_capita_income_zipcode >= 0),
  yearly_income_person      NUMBER CHECK (yearly_income_person >= 0),
  total_debt                NUMBER CHECK (total_debt >= 0),
  fico_score                INTEGER,
  num_credit_cards          INTEGER,
  create_date               DATE DEFAULT sysdate NOT NULL,
  update_date               DATE
);


-- Справочник карта/dpan
CREATE TABLE card_dpan ( 
  card_number               NUMBER NOT NULL PRIMARY KEY,
  dpan                      VARCHAR2(1000)
  );
 
 
-- Карты
CREATE TABLE cards ( 
  person_id                 INTEGER REFERENCES users(person_id) ON DELETE CASCADE,
  card_index                INTEGER,
  card_brand                VARCHAR2(30),
  card_type                 VARCHAR2(30) CHECK (card_type IN ('Debit', 'Credit', 'Debit (Prepaid)')),
  dpan                      VARCHAR2(1000),
  expires                   DATE,
  cvv                       INTEGER,
  has_chip                  VARCHAR2(3) CHECK (has_chip IN ('YES', 'NO')),
  cards_issued              INTEGER,
  credit_limit              NUMBER CHECK(credit_limit >= 0),
  acct_open_date            DATE CHECK(acct_open_date >= TO_DATE('1990/01/01', 'yyyy/mm/dd')),
  year_pin_last_changed     INTEGER CHECK(year_pin_last_changed >= 1990),
  create_date               DATE DEFAULT sysdate NOT NULL,
  update_date               DATE,
  CONSTRAINT cards_pk PRIMARY KEY (person_id, card_index)
  );
 

-- Транзакции
-- Уникальность достигается при первичном ключе person_id, card, transaction_time, merchant_city, amount, status
CREATE TABLE transactions ( 
  transaction_id            INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 0 MINVALUE 0,
  transaction_time          DATE,
  person_id                 INTEGER REFERENCES users(person_id) ON DELETE CASCADE,
  card                      INTEGER,
  amount                    NUMBER,
  use_chip                  VARCHAR2(30),
  merchant_name             VARCHAR2(100),
  merchant_city             VARCHAR2(100),
  merchant_state            VARCHAR2(100),
  zip                       VARCHAR2(10),
  mcc                       INTEGER,
  err                       VARCHAR2(1000),
  status                    VARCHAR2(4) GENERATED ALWAYS AS (CASE WHEN err IS NULL THEN 'ok' ELSE 'neok' END),
  create_date               DATE DEFAULT sysdate NOT NULL,
  update_date               DATE,
  CONSTRAINT trans_pk PRIMARY KEY (person_id, card, transaction_time, merchant_city, amount, status),
  CONSTRAINT card_fk FOREIGN KEY (person_id, card) REFERENCES cards(person_id, card_index) ON DELETE CASCADE
 );


-- Триггеры на обновление таблиц
CREATE OR REPLACE TRIGGER users_update
BEFORE UPDATE ON users
FOR EACH ROW
BEGIN
:NEW.update_date := sysdate;
END;


CREATE OR REPLACE TRIGGER cards_update
BEFORE UPDATE ON cards
FOR EACH ROW
BEGIN
:NEW.update_date := sysdate;
END;


CREATE OR REPLACE TRIGGER trans_update
BEFORE UPDATE ON transactions
FOR EACH ROW
BEGIN
:NEW.update_date := sysdate;
END;